{{!
Copyright 2025 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
/// Sets the value of [{{Codec.FieldName}}][{{Codec.StructQualifiedName}}::{{Codec.SetterName}}].
///
/// Note that all the setters affecting `{{Codec.FieldName}}` are mutually
/// exclusive.
{{#ModelCodec.GenerateSetterSamples}}
///
/// # Example
/// ```
{{#Codec.ExampleField}}
{{#IsString}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}("example".to_string())));
{{/IsString}}
{{#IsBytes}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(bytes::Bytes::from_static(b"example"))));
{{/IsBytes}}
{{#IsBool}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(true)));
{{/IsBool}}
{{#IsLikeInt}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(42)));
{{/IsLikeInt}}
{{#IsLikeFloat}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(42.0)));
{{/IsLikeFloat}}
{{#IsEnum}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use {{EnumType.Codec.NameInExamples}};
{{#EnumType.Codec.ValuesForExamples}}
/// let x{{Index}} = {{FieldParent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{FieldCodec.BranchName}}({{EnumValue.Codec.EnumType}}::{{EnumValue.Codec.VariantName}})));
{{/EnumType.Codec.ValuesForExamples}}
{{/IsEnum}}
{{#IsObject}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use {{MessageType.Codec.NameInExamples}};
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}({{MessageType.Codec.Name}}::default().into())));
{{/IsObject}}
{{#IsRepeated}}
{{#IsString}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(vec!["a".to_string(), "b".to_string(), "c".to_string()])));
{{/IsString}}
{{#IsBytes}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// let b1 = bytes::Bytes::from_static(b"abc");
/// let b2 = bytes::Bytes::from_static(b"xyz");
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(vec![b1, b2])));
{{/IsBytes}}
{{#IsBool}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(vec![true, false, true])));
{{/IsBool}}
{{#IsLikeInt}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(vec![1, 2, 3])));
{{/IsLikeInt}}
{{#IsLikeFloat}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(vec![1.0, 2.0, 3.0])));
{{/IsLikeFloat}}
{{#IsEnum}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use {{EnumType.Codec.NameInExamples}};
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(vec![
{{#EnumType.Codec.ValuesForExamples}}
///     {{EnumValue.Codec.EnumType}}::{{EnumValue.Codec.VariantName}},
{{/EnumType.Codec.ValuesForExamples}}
/// ])));
{{/IsEnum}}
{{#IsObject}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use {{MessageType.Codec.NameInExamples}};
/// let x = {{Parent.Codec.Name}}::new()
///     .set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(vec![
///         {{MessageType.Codec.Name}}::default()/* use setters */,
///         {{MessageType.Codec.Name}}::default()/* use (different) setters */,
///     ])));
{{/IsObject}}
{{/IsRepeated}}
{{#IsMap}}
{{#Codec.KeyField.IsString}}
{{#Codec.ValueField.IsString}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     ("key0".to_string(), "abc".to_string()),
///     ("key1".to_string(), "xyz".to_string()),
/// ]))));
{{/Codec.ValueField.IsString}}
{{#Codec.ValueField.IsBytes}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     ("key0".to_string(), bytes::Bytes::from_static(b"abc")),
///     ("key1".to_string(), bytes::Bytes::from_static(b"xyz")),
/// ]))));
{{/Codec.ValueField.IsBytes}}
{{#Codec.ValueField.IsBool}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     ("key0".to_string(), true),
///     ("key1".to_string(), false),
/// ]))));
{{/Codec.ValueField.IsBool}}
{{#Codec.ValueField.IsLikeInt}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     ("key0".to_string(), 123),
///     ("key1".to_string(), 456),
/// ]))));
{{/Codec.ValueField.IsLikeInt}}
{{#Codec.ValueField.IsLikeFloat}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     ("key0".to_string(), 123.5),
///     ("key1".to_string(), 456.5),
/// ]))));
{{/Codec.ValueField.IsLikeFloat}}
{{#Codec.ValueField.IsEnum}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use {{Codec.ValueField.EnumType.Codec.NameInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
{{#Codec.ValueField.EnumType.Codec.ValuesForExamples}}
///     ("key{{Index}}".to_string(), {{EnumValue.Codec.EnumType}}::{{EnumValue.Codec.VariantName}}),
{{/Codec.ValueField.EnumType.Codec.ValuesForExamples}}
/// ]))));
{{/Codec.ValueField.IsEnum}}
{{#Codec.ValueField.IsObject}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use {{Codec.ValueField.MessageType.Codec.NameInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     ("key0".to_string(), {{Codec.ValueField.MessageType.Codec.Name}}::default()/* use setters */),
///     ("key1".to_string(), {{Codec.ValueField.MessageType.Codec.Name}}::default()/* use (different) setters */),
/// ]))));
{{/Codec.ValueField.IsObject}}
{{/Codec.KeyField.IsString}}
{{#Codec.KeyField.IsBool}}
{{#Codec.ValueField.IsString}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (true, "abc".to_string()),
///     (false, "xyz".to_string()),
/// ]))));
{{/Codec.ValueField.IsString}}
{{#Codec.ValueField.IsBytes}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (true, bytes::Bytes::from_static(b"abc")),
///     (false, bytes::Bytes::from_static(b"xyz")),
/// ]))));
{{/Codec.ValueField.IsBytes}}
{{#Codec.ValueField.IsBool}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (true, true),
///     (false, false),
/// ]))));
{{/Codec.ValueField.IsBool}}
{{#Codec.ValueField.IsLikeInt}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (true, 123),
///     (false, 456),
/// ]))));
{{/Codec.ValueField.IsLikeInt}}
{{#Codec.ValueField.IsLikeFloat}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (true, 123.5),
///     (false, 456.5),
/// ]))));
{{/Codec.ValueField.IsLikeFloat}}
{{#Codec.ValueField.IsEnum}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use {{Codec.ValueField.EnumType.Codec.NameInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
{{#Codec.ValueField.EnumType.Codec.ValuesForExamples}}
///     (true, {{EnumValue.Codec.EnumType}}::{{EnumValue.Codec.VariantName}}),
{{/Codec.ValueField.EnumType.Codec.ValuesForExamples}}
/// ]))));
{{/Codec.ValueField.IsEnum}}
{{#Codec.ValueField.IsObject}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use {{Codec.ValueField.MessageType.Codec.NameInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (true, {{Codec.ValueField.MessageType.Codec.Name}}::default()/* use setters */),
///     (false, {{Codec.ValueField.MessageType.Codec.Name}}::default()/* use (different) setters */),
/// ]))));
{{/Codec.ValueField.IsObject}}
{{/Codec.KeyField.IsBool}}
{{#Codec.KeyField.IsLikeInt}}
{{#Codec.ValueField.IsString}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (0, "abc".to_string()),
///     (1, "xyz".to_string()),
/// ]))));
{{/Codec.ValueField.IsString}}
{{#Codec.ValueField.IsBytes}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (0, bytes::Bytes::from_static(b"abc")),
///     (1, bytes::Bytes::from_static(b"xyz")),
/// ]))));
{{/Codec.ValueField.IsBytes}}
{{#Codec.ValueField.IsBool}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (0, true),
///     (1, false),
/// ]))));
{{/Codec.ValueField.IsBool}}
{{#Codec.ValueField.IsLikeInt}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (0, 123),
///     (1, 456),
/// ]))));
{{/Codec.ValueField.IsLikeInt}}
{{#Codec.ValueField.IsLikeFloat}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (0, 123.5),
///     (1, 456.5),
/// ]))));
{{/Codec.ValueField.IsLikeFloat}}
{{#Codec.ValueField.IsEnum}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use {{Codec.ValueField.EnumType.Codec.NameInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
{{#Codec.ValueField.EnumType.Codec.ValuesForExamples}}
///     ({{Index}}, {{EnumValue.Codec.EnumType}}::{{EnumValue.Codec.VariantName}}),
{{/Codec.ValueField.EnumType.Codec.ValuesForExamples}}
/// ]))));
{{/Codec.ValueField.IsEnum}}
{{#Codec.ValueField.IsObject}}
/// # use {{Parent.Codec.NameInExamples}};
/// use {{Group.Codec.ScopeInExamples}};
/// use {{Codec.ValueField.MessageType.Codec.NameInExamples}};
/// use std::collections::HashMap;
/// let x = {{Parent.Codec.Name}}::new().set_{{Group.Codec.SetterName}}(Some({{{Group.Codec.RelativeName}}}::{{Codec.BranchName}}(HashMap::from([
///     (0, {{Codec.ValueField.MessageType.Codec.Name}}::default()/* use setters */),
///     (1, {{Codec.ValueField.MessageType.Codec.Name}}::default()/* use (different) setters */),
/// ]))));
{{/Codec.ValueField.IsObject}}
{{/Codec.KeyField.IsLikeInt}}
{{/IsMap}}
{{/Codec.ExampleField}}
/// ```
{{/ModelCodec.GenerateSetterSamples}}
