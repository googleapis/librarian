{{!
Copyright 2025 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}

{{#Codec.DocLines}}
{{{.}}}
{{/Codec.DocLines}}
final class {{Codec.Name}} {
  static const _host = '{{DefaultHost}}';

  final ServiceClient _client;

  /// Creates a `{{Codec.Name}}` using [client] for transport.
  ///
  /// The provided [http.Client] must be configured to provide whatever
  /// authentication is required by `{{Codec.Name}}`. You can do that using
  /// [`package:googleapis_auth`](https://pub.dev/packages/googleapis_auth).
  {{Codec.Name}}({required http.Client client})
      : _client = ServiceClient(client: client);

  /// Creates a `{{Codec.Name}}` that does authentication through an API key.
  ///
  /// If called without arguments, the API key is taken from these environment
  /// variables:
  ///
{{#Model.Codec.ApiKeyEnvironmentVariables}}
  /// - `{{{.}}}`
{{/Model.Codec.ApiKeyEnvironmentVariables}}
  ///
  /// Throws [ArgumentError] if called without arguments and none of the above
  /// environment variables are set.
  ///
  /// See [API Keys Overview](https://cloud.google.com/api-keys/docs/overview).
  factory {{Codec.Name}}.fromApiKey([String? apiKey]) {
    apiKey ??= _apiKeys.map(environmentVariable).nonNulls.firstOrNull;
    if (apiKey == null) {
      throw ArgumentError('apiKey or one of these environment variables must '
        'be set to an API key: ${_apiKeys.join(', ')}');
    }
    return {{Codec.Name}}(client: auth.clientViaApiKey(apiKey));
  }

  {{#Codec.Methods}}
  {{> method}}
  {{/Codec.Methods}}

  /// Closes the client and cleans up any resources associated with it.
  ///
  /// Once [close] is called, no other methods should be called.
  void close() => _client.close();
}
