// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package google.cloud.sdk.pipeline;

option go_package = "github.com/googleapis/librarian/internal/statepb;statepb";

import "google/protobuf/timestamp.proto";

// Overall state of the generation and release pipeline. This is expected
// to be stored in each language repo as generator-input/pipeline-state.json.
message PipelineState {
  // The image tag that the CLI should use when invoking the
  // language-specific tooling. The image name is assumed by convention, or
  // overridden in PipelineConfig.
  string image_tag = 1;

  // The state of each library which is released within this repository.
  repeated LibraryState libraries = 3;

  // Paths to files/directories which can trigger
  // a release in all libraries.
  repeated string common_library_source_paths = 4;

  // API paths which are deliberately not configured. (Ideally this would
  // be empty for all languages, but there may be temporary reasons not to configure
  // an API.)
  repeated string ignored_api_paths = 5;
}

// Generation state of a single library.
message LibraryState {
  // The library identifier (language-specific format)
  string id = 1;

  // The last version that was released, if any.
  string current_version = 2;

  // The next version to release (to force a specific version number).
  // This should usually be unset.
  string next_version = 3;

  // The automation level for generation for this library.
  AutomationLevel generation_automation_level = 4;

  // The automation level for releases for this library.
  AutomationLevel release_automation_level = 5;

  // The timestamp of the latest release. (This is typically
  // some timestamp within the process of generating the release
  // PR for the library. Importantly, it's not just a date as
  // there may be reasons to release a library multiple times
  // within a day.) This is unset if the library has not yet been
  // released.
  .google.protobuf.Timestamp release_timestamp = 6;

  // The commit hash (within the API definition repo) at which
  // the library was last generated. This is empty if the library
  // has not yet been generated.
  string last_generated_commit = 7;

  // The last-generated commit hash (within the API definition repo)
  // at the point of the last/in-progress release. (This is taken
  // from the generation state at the time of the release.) This
  // is empty if the library has not yet been released.
  string last_released_commit = 8;

  // The API paths included in this library, relative to the root
  // of the API definition repo, e.g. "google/cloud/functions/v2".
  repeated string api_paths = 9;

  // Paths to files or directories contributing to this library.
  repeated string source_paths = 10;
}

// The degree of automation to use when generating/releasing.
enum AutomationLevel {
  // Not used.
  AUTOMATION_LEVEL_NONE = 0;
  // Automation is blocked: this API/library should be skipped
  AUTOMATION_LEVEL_BLOCKED = 1;
  // Automation can generate changes/releases,
  // but they need to be reviewed.
  AUTOMATION_LEVEL_MANUAL_REVIEW = 2;
  // Automation can generated changes/releases which can
  // proceed without further review if all tests pass.
  AUTOMATION_LEVEL_AUTOMATIC = 3;
}

// Manually-maintained configuration for the pipeline.
message PipelineConfig {
  // The name of the image to use, where the convention is not
  // appropriate. The tag is specified in PipelineState.
  string image_name = 1;

  // Specific configuration for each individual command.
  map<string, CommandConfig> commands = 2;
}

// Configuration for a specific container command.
message CommandConfig {
  // The environment variables to populate for this command.
  repeated CommandEnvironmentVariable environment_variables = 1;
}

// An environment variable to be provided to a container command.
message CommandEnvironmentVariable {
  // The name of the environment variable (e.g. TEST_PROJECT).
  string name = 1;

  // The name of the secret to be used to fetch the value of the environment
  // variable when it's not present in the host system. If this is not specified,
  // or if a Secret Manager project has not been provided to Librarian,
  // any missing environment variables are skipped.
  string secret_name = 2;
}
